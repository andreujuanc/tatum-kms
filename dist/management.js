"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getQuestion = exports.getTatumKey = exports.removeWallet = exports.getAddress = exports.getPrivateKey = exports.getWallet = exports.storePrivateKey = exports.storeWallet = exports.getManagedWallets = exports.exportWallets = void 0;
const tatum_1 = require("@tatumio/tatum");
const tatum_kcs_1 = require("@tatumio/tatum-kcs");
const tatum_solana_1 = require("@tatumio/tatum-solana");
const terra_1 = require("@tatumio/terra");
const crypto_js_1 = require("crypto-js");
const fs_1 = require("fs");
const os_1 = require("os");
const path_1 = require("path");
const readline_sync_1 = require("readline-sync");
const uuid_1 = require("uuid");
const config_1 = require("./config");
const config = new config_1.Config();
const ensurePathExists = (path) => {
    const dir = path_1.dirname(path);
    if (!fs_1.existsSync(dir)) {
        fs_1.mkdirSync(dir, { recursive: true });
    }
};
exports.exportWallets = (path) => {
    const pwd = config.getValue(config_1.ConfigOption.KMS_PASSWORD);
    const pathToWallet = path || os_1.homedir() + '/.tatumrc/wallet.dat';
    if (!fs_1.existsSync(pathToWallet)) {
        console.error(JSON.stringify({ error: `No such wallet file.` }, null, 2));
        return;
    }
    const data = fs_1.readFileSync(pathToWallet, { encoding: 'utf8' });
    if (!data?.length) {
        console.error(JSON.stringify({ error: `No such wallet file.` }, null, 2));
        return;
    }
    console.log(JSON.stringify(JSON.parse(crypto_js_1.AES.decrypt(data, pwd).toString(crypto_js_1.enc.Utf8)), null, 2));
};
exports.getManagedWallets = (pwd, chain, testnet, path) => {
    const pathToWallet = path || os_1.homedir() + '/.tatumrc/wallet.dat';
    if (!fs_1.existsSync(pathToWallet)) {
        console.error(JSON.stringify({ error: `No such wallet file.` }, null, 2));
        return [];
    }
    const data = fs_1.readFileSync(pathToWallet, { encoding: 'utf8' });
    if (!data?.length) {
        return [];
    }
    const wallets = JSON.parse(crypto_js_1.AES.decrypt(data, pwd).toString(crypto_js_1.enc.Utf8));
    const keys = [];
    for (const walletsKey in wallets) {
        if (chain === wallets[walletsKey].chain && testnet === wallets[walletsKey].testnet) {
            keys.push(walletsKey);
        }
    }
    return keys;
};
exports.storeWallet = async (chain, testnet, path, mnemonic) => {
    const pwd = config.getValue(config_1.ConfigOption.KMS_PASSWORD);
    const pathToWallet = path || os_1.homedir() + '/.tatumrc/wallet.dat';
    let wallet;
    if (chain === tatum_1.Currency.SOL) {
        wallet = await tatum_solana_1.generateWallet();
    }
    else if (chain === tatum_1.Currency.KCS) {
        wallet = await tatum_kcs_1.generateWallet(mnemonic, { testnet });
    }
    else if (chain === tatum_1.Currency.LUNA) {
        wallet = terra_1.TatumTerraSDK({ apiKey: process.env.TATUM_API_KEY }).wallet.wallet();
    }
    else {
        wallet = await tatum_1.generateWallet(chain, testnet, mnemonic);
    }
    const key = uuid_1.v4();
    const entry = { [key]: { ...wallet, chain, testnet } };
    if (!fs_1.existsSync(pathToWallet)) {
        ensurePathExists(pathToWallet);
        fs_1.writeFileSync(pathToWallet, crypto_js_1.AES.encrypt(JSON.stringify(entry), pwd).toString());
    }
    else {
        const data = fs_1.readFileSync(pathToWallet, { encoding: 'utf8' });
        let walletData = entry;
        if (data?.length > 0) {
            walletData = { ...walletData, ...JSON.parse(crypto_js_1.AES.decrypt(data, pwd).toString(crypto_js_1.enc.Utf8)) };
        }
        fs_1.writeFileSync(pathToWallet, crypto_js_1.AES.encrypt(JSON.stringify(walletData), pwd).toString());
    }
    const value = { signatureId: key };
    if (wallet.address) {
        value.address = wallet.address;
    }
    if (wallet.xpub) {
        value.xpub = wallet.xpub;
    }
    console.log(JSON.stringify(value, null, 2));
};
exports.storePrivateKey = async (chain, testnet, privateKey, path) => {
    const pwd = config.getValue(config_1.ConfigOption.KMS_PASSWORD);
    const pathToWallet = path || os_1.homedir() + '/.tatumrc/wallet.dat';
    const key = uuid_1.v4();
    const entry = { [key]: { privateKey, chain, testnet } };
    if (!fs_1.existsSync(pathToWallet)) {
        ensurePathExists(pathToWallet);
        fs_1.writeFileSync(pathToWallet, crypto_js_1.AES.encrypt(JSON.stringify(entry), pwd).toString());
    }
    else {
        const data = fs_1.readFileSync(pathToWallet, { encoding: 'utf8' });
        let walletData = entry;
        if (data?.length > 0) {
            walletData = { ...walletData, ...JSON.parse(crypto_js_1.AES.decrypt(data, pwd).toString(crypto_js_1.enc.Utf8)) };
        }
        fs_1.writeFileSync(pathToWallet, crypto_js_1.AES.encrypt(JSON.stringify(walletData), pwd).toString());
    }
    console.log(JSON.stringify({ signatureId: key }, null, 2));
};
exports.getWallet = async (id, path, pwd, print = true) => {
    const password = pwd ?? config.getValue(config_1.ConfigOption.KMS_PASSWORD);
    const pathToWallet = path || os_1.homedir() + '/.tatumrc/wallet.dat';
    if (!fs_1.existsSync(pathToWallet)) {
        console.error(JSON.stringify({ error: `No such wallet for signatureId '${id}'.` }, null, 2));
        return;
    }
    const data = fs_1.readFileSync(pathToWallet, { encoding: 'utf8' });
    if (!data?.length) {
        console.error(JSON.stringify({ error: `No such wallet for signatureId '${id}'.` }, null, 2));
        return;
    }
    try {
        const wallet = JSON.parse(crypto_js_1.AES.decrypt(data, password).toString(crypto_js_1.enc.Utf8));
        if (!wallet[id]) {
            console.error(JSON.stringify({ error: `No such wallet for signatureId '${id}'.` }, null, 2));
            return;
        }
        if (print) {
            console.log(JSON.stringify(wallet[id], null, 2));
        }
        return wallet[id];
    }
    catch (e) {
        console.error(JSON.stringify({ error: `Wrong password.` }, null, 2));
        return;
    }
};
exports.getPrivateKey = async (id, index, path) => {
    const pwd = config.getValue(config_1.ConfigOption.KMS_PASSWORD);
    const pathToWallet = path || os_1.homedir() + '/.tatumrc/wallet.dat';
    if (!fs_1.existsSync(pathToWallet)) {
        console.error(JSON.stringify({ error: `No such wallet for signatureId '${id}'.` }, null, 2));
        return;
    }
    const data = fs_1.readFileSync(pathToWallet, { encoding: 'utf8' });
    if (!data?.length) {
        console.error(JSON.stringify({ error: `No such wallet for signatureId '${id}'.` }, null, 2));
        return;
    }
    const wallet = JSON.parse(crypto_js_1.AES.decrypt(data, pwd).toString(crypto_js_1.enc.Utf8));
    if (!wallet[id]) {
        console.error(JSON.stringify({ error: `No such wallet for signatureId '${id}'.` }, null, 2));
        return;
    }
    const pk = { privateKey: (wallet[id].secret
            ? wallet[id].secret
            : await tatum_1.generatePrivateKeyFromMnemonic(wallet[id].chain, wallet[id].testnet, wallet[id].mnemonic, parseInt(index))) };
    console.log(JSON.stringify(pk, null, 2));
};
exports.getAddress = async (id, index, path) => {
    const pwd = config.getValue(config_1.ConfigOption.KMS_PASSWORD);
    const pathToWallet = path || os_1.homedir() + '/.tatumrc/wallet.dat';
    if (!fs_1.existsSync(pathToWallet)) {
        console.error(JSON.stringify({ error: `No such wallet for signatureId '${id}'.` }, null, 2));
        return;
    }
    const data = fs_1.readFileSync(pathToWallet, { encoding: 'utf8' });
    if (!data?.length) {
        console.error(JSON.stringify({ error: `No such wallet for signatureId '${id}'.` }, null, 2));
        return;
    }
    const wallet = JSON.parse(crypto_js_1.AES.decrypt(data, pwd).toString(crypto_js_1.enc.Utf8));
    if (!wallet[id]) {
        console.error(JSON.stringify({ error: `No such wallet for signatureId '${id}'.` }, null, 2));
        return;
    }
    const pk = { address: (wallet[id].address ? wallet[id].address : await tatum_1.generateAddressFromXPub(wallet[id].chain, wallet[id].testnet, wallet[id].xpub, parseInt(index))) };
    console.log(JSON.stringify(pk, null, 2));
};
exports.removeWallet = async (id, path) => {
    const pwd = config.getValue(config_1.ConfigOption.KMS_PASSWORD);
    const pathToWallet = path || os_1.homedir() + '/.tatumrc/wallet.dat';
    if (!fs_1.existsSync(pathToWallet)) {
        console.error(JSON.stringify({ error: `No such wallet for signatureId '${id}'.` }, null, 2));
        return;
    }
    const data = fs_1.readFileSync(pathToWallet, { encoding: 'utf8' });
    if (!data?.length) {
        console.error(JSON.stringify({ error: `No such wallet for signatureId '${id}'.` }, null, 2));
        return;
    }
    const wallet = JSON.parse(crypto_js_1.AES.decrypt(data, pwd).toString(crypto_js_1.enc.Utf8));
    delete wallet[id];
    fs_1.writeFileSync(pathToWallet, crypto_js_1.AES.encrypt(JSON.stringify(wallet), pwd).toString());
};
exports.getTatumKey = (apiKey) => {
    if (apiKey) {
        process.env.TATUM_API_KEY = apiKey;
        return;
    }
};
exports.getQuestion = (q, e) => {
    if (e) {
        return e;
    }
    return readline_sync_1.question(q, {
        hideEchoBack: true,
    });
};
//# sourceMappingURL=data:application/json;base64,